<?php
$option = new Application_Model_Option();
$options = $option->findAll([
    'is_enabled = ?' => 1
]);
$option_ids = $this->getApplication()->getOptionIds();
$application = $this->getApplication();
$appId = $application->getId();

$session = $this->getSession();

/**
 * @var $admin Admin_Model_Admin
 */
$admin = $session->getAdmin();

// Sorting features by alpha (with translations)!
$opts = [];
foreach ($options as $option) {
    $opts[] = $option;
}
function alphasort($a, $b)
{
    return strcasecmp($a->getName(), $b->getName());
}

usort($opts, "alphasort");
$options = $opts;

$categoryIds = [];
foreach ($options as $option) {
    if (!in_array($option->getCategoryId(), $categoryIds)) {
        $categoryIds[] = $option->getCategoryId();
    }
}

$categories = (new Application_Model_Option_Category())
    ->findAll([
        'category_id IN (?)' => $categoryIds
    ]);

$isBackofficeUser = $admin->isBackofficeUser();
$masterId = null;


$adminId = $admin->getId();

/**
 * @var $cacheOutput Zend_Cache_Frontend_Output
 */
$cacheOutput = Zend_Registry::get("cacheOutput");

/**
 * @param $canAccess
 * @param $option
 * @param $option_ids
 * @param $masterId
 * @param $isBackofficeUser
 * @return bool
 */
function hideFeature ($canAccess, $option, $option_ids, $masterId, $isBackofficeUser)
{
    return
        !$canAccess ||
        ($option->onlyOnce() && in_array($option->getId(), $option_ids)) ||
        (!$isBackofficeUser && ($masterId == $option->getCategoryId()));
}
?>

<script type="text/javascript">
    tabbar_names = [];
</script>

<div class="page-content-wrapper">
    <div id="pages_content"
         class="content position-path sb-tour">

        <h3 class="title-editor border-blue text-center">

            <div id="go_up_root"
                 class="hide">
                <button class="btn color-blue"
                        title="<?php echo __js("Go back to homepage") ?>">
                    <i class="fa fa-home"></i>
                </button>
            </div>

            <div class="list-search list-carousel">
                <div class="list-search-content">
                    <input type="text"
                           class="search_filter_carousel input-flat"
                           placeholder="<?php echo __js("Search ..."); ?>"/>
                    <i class="fa fa-search empty active"></i>
                    <i class="fa fa-times clear"></i>
                </div>
            </div>

            <?php echo __("Your pages"); ?>
            <i class="icon ion-ios-information-outline display_tooltip"
               data-toggle="tooltip"
               title="<?php echo p__js("application", "Here are displayed the features, and so the pages that you have added to your app. You can add content, change the position and remove any page anytime.", '"') ?>"></i>


            <?php if (__get('import_enabled')): ?>
            <button id="feature_import_export"
                    class="sb-tour color-blue bt-header-right btn import-feature pull-right export-button">
                <?php echo __("Import") ?>
            </button>
            <?php endif; ?>

        </h3>
        <div id="pages_list"
             class="subcontent content-color sb-tour">
            <div>
                <?php echo $this->getLayout()
                    ->addPartial('list_options', 'admin_view_default', 'application/customization/features/list/options.phtml')
                    ->setCategoryId('default')
                    ->toHtml();
                ?>
            </div>
        </div>
    </div>

    <div id="header_editor" style="display: none;">
        <div id="page" class="content-color"></div>
        <div id="push_map_canvas_container" style="display:none;">
            <div id="push_map_canvas"></div>
        </div>
    </div>

    <script type="text/javascript">

        let modal_import_export = new Modal({
            id: 'modal_import_export',
            url: '<?php echo $this->getUrl('application/customization_features/exportmodal'); ?>',
            is_retain: false,
            width: 850,
            height: 'auto'
        });
        $('#feature_import_export').click(function () {
            modal_import_export.show();
        });

    </script>

    <?php if ($admin->isAllowedToAddPages($appId)) : ?>
        <?php if (!$cacheOutput->start("add_pages_admin_id_{$adminId}_{$appId}")): ?>
        <div id="previews"
             style="display:none;">
            <div id="preview_mask"
                 class="close_previews"></div>

            <div id="previews_list"
                 class="previews_list">
            <span class="pull-right">
                <button class="preview_button close_previews relative"
                        type="button">
                    <i class="fa fa-times"></i>
                </button>
            </span>
                <h3 class="title-editor border-blue text-center">
                    <?php echo __('Add a page'); ?>
                </h3>
                <?php foreach ($options as $key => $option) : ?>
                    <?php $preview = $option->getPreview(); ?>
                    <?php if ($preview->getId() && $preview->getTitle()) : ?>
                        <?php $images = $preview->findImages(); ?>
                        <div id="previews_<?php echo $option->getId(); ?>"
                             class="preview"
                             style="position:relative">
                            <div class="row">
                                <div class="col-md-12">
                                    <ul id="preview_<?php echo $option->getId(); ?>"
                                        data-pager="pager_<?php echo $option->getId(); ?>">
                                        <li>
                                            <div class="row">
                                                <div class="<?php if (count($images) <= 0) echo "col-md-12"; else echo "col-md-7"; ?>">
                                                    <div class="preview_container" <?php if (count($images) <= 0) echo "style='width:100%'"; ?>>
                                                        <h4 class="f-bold"><?php echo $preview->getTitle(); ?></h4>
                                                        <p style="text-align:justify"><?php echo $preview->getDescription(); ?></p>
                                                    </div>
                                                </div>
                                                <div class="col-md-5" <?php if (count($images) <= 0) echo "style='display:none'"; ?>>
                                                    <?php if (count($images) > 0) : ?>
                                                        <div id="preview_carousel"
                                                             class="pictures_container carousel slide">
                                                            <ol class="carousel-indicators" style="bottom:-20px">
                                                                <?php $cpt = 0; ?>
                                                                <?php foreach ($images as $image) : ?>
                                                                    <li data-target="#preview_carousel"
                                                                        data-slide-to="<?php echo $cpt; ?>" <?php if ($cpt == 0): echo "class='active'"; endif; ?>></li>
                                                                    <?php $cpt++; ?>
                                                                <?php endforeach; ?>
                                                            </ol>
                                                            <div class="carousel-inner" role="listbox">
                                                                <?php $cpt = 0; ?>
                                                                <?php foreach ($images as $image) : ?>
                                                                    <div class="item <?php if ($cpt == 0): echo "active"; endif; ?>">
                                                                        <img src="<?php echo $image->getLink(); ?>">
                                                                    </div>
                                                                    <?php $cpt++; ?>
                                                                <?php endforeach ?>
                                                            </div>
                                                        </div>
                                                    <?php endif; ?>
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2 col-md-offset-10">
                                    <button type="button"
                                            class="add_page preview_button color-blue pull-right btn">
                                        <?php echo __("Add content"); ?>
                                    </button>
                                    <input type="hidden"
                                           name="option_id"
                                           value="<?php echo $option->getId(); ?>"/>
                                </div>
                            </div>
                        </div>
                    <?php endif; ?>
                <?php endforeach; ?>
            </div>
        </div>

        <div id="add_pages_content"
             class="content sb-tour">
            <h3 class="title-editor border-blue text-center">

                <div class="list-search">
                    <div class="list-search-content">
                        <input type="text"
                               class="search_filter_feature input-flat"
                               placeholder="<?php echo __js("Search ..."); ?>"/>
                        <i class="fa fa-search empty active"></i>
                        <i class="fa fa-times clear"></i>
                    </div>
                </div>

                <?php echo __("Add pages"); ?>
                <i class="icon ion-ios-information-outline display_tooltip"
                   data-toggle="tooltip"
                   title="<?php echo p__js("application", "Here is the list of the available features you can add to your app. Some features can be added only once while some other features can be added multiple time.", '"') ?>"></i>
            </h3>
            <div id="add-pages"
                 class="subcontent content-color">
                <div class="container-fluid">
                    <div class="content">
                        <div id="sb-tour-add-pages-filter"
                             class="content-no-padding col-md-3 sb-tour">
                            <ul class="carret content-options content-white-bkg">
                                <li><a href="javascript:void(0)"
                                       class="filter_category color-blue button_handler active"
                                       rel="all"><?php echo strtoupper(__("All")); ?></a></li>
                                <?php
                                    $cats = [];
                                    foreach ($categories as $category):
                                        $cats[$category->getId()] = $category->getData('name');

                                    // Skip master features!
                                    if ($category->getCode() === '_master' && !$isBackofficeUser) {
                                        $masterId = $category->getId();
                                        continue;
                                    }
                                ?>
                                    <li>
                                        <a href="javascript:void(0)"
                                           class="filter_category"
                                           rel="<?php echo $category->getId() ?>"><?php echo strtoupper(__($category->getName())); ?></a>
                                    </li>
                                <?php
                                    endforeach;
                                ?>
                            </ul>
                        </div>
                        <div class="icons-list col-md-9">
                            <div>
                                <ul id="add_page_list" class="sb-tour">
                                    <?php foreach ($options as $key => $option) : ?>
                                        <?php if (hideFeature ($this->_canAccess('feature_' . $option->getCode(), 'all'), $option, $option_ids, $masterId, $isBackofficeUser)) continue; ?>
                                        <?php $preview = $option->getPreview(); ?>
                                        <li id="add_page_<?php echo $option->getId(); ?>"
                                            data-search="<?php echo __js(strtolower($option->getName() . ' ' . $option->getCode() . ' ' . $option->getData('name') . ' ' . $cats[$option->getCategoryId()] . ' ' . __($cats[$option->getCategoryId()])), '"'); ?>"
                                            class="feature_search sb-tour add_option_value col-md-3 col-sm-3 col-xs-4 category_option category_option_<?php echo $option->getCategoryId(); ?>">
                                            <a href="<?php echo $this->getUrl('application/customization_features/save'); ?>"
                                               class="details <?php if ($preview->getId() AND $preview->getTitle()) : ?>show_previews<?php else : ?>add_page<?php endif; ?>"
                                               rel="<?php echo $option->getId(); ?>">
                                                <div class="color-blue block_add_pages_icon btn default_size_details"
                                                     style="background-image: url('<?php echo $this->getIconUrl($option); ?>')">
                                                    <img src="/app/sae/design/desktop/flat/images/placeholder/blank-512.png"
                                                         alt="<?php echo $option->getName(); ?>"
                                                         title="<?php echo $option->getName(); ?>" width="auto"
                                                         height="50" class="block"
                                                         data-image="<?php echo $option->getIconId() ?>"
                                                         data-style="area" data-color="color"/>
                                                    <span><?php echo cut($option->getName(), 14); ?></span>
                                                    <input type="hidden" name="option_id"
                                                           value="<?php echo $option->getId(); ?>"/>
                                                </div>
                                            </a>
                                        </li>
                                    <?php endforeach; ?>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <?php $cacheOutput->end(["cache_admin", "app_{$appId}", "admin_{$adminId}"]); endif; ?>
    <?php endif; ?>
</div>

<?php if (!$cacheOutput->start("features_js_css_admin_id_{$adminId}_{$appId}")): ?>
<script type="text/javascript">

    function createElementFromHTML(htmlString) {
        var div = document.createElement('div');
        div.innerHTML = htmlString.trim();

        // Change this to div.childNodes to support multiple top-level nodes
        return div.firstChild;
    }

    var carousel = null;
    $(document).ready(function () {

        createCarouselSortable();
        setTimeout(function () {
            $('#pages_list #option_values').sbCarousel({
                next_button: $('#pages_list #carousel_next'),
                prev_button: $('#pages_list #carousel_prev'),
                is_responsive: true,
                responsive_parent: $("#carousel-container")
            });
            carousel = $('#pages_list #option_values').data('carousel');
        }, 500);

        // Prevents too much resize events
        let isResizing = false;
        $(window).resize(function () {
            if (!isResizing) {
                isResizing = true;
                carousel.update();
                setTimeout(function () {
                    isResizing = false;
                }, 100);
            }
        });

        $('#go_up_root').off('click');
        $('#go_up_root').on('click', function () {
            folder.reset();
            options.loadNewSlider('default');
        });
    });

    var Options = Class.extend({
        init: function () {

        },
        loadNewSlider: function (category_id, value_id, showCategoryManage) {
            $('#option_values li').hide();
            if (category_id === 'default') {
                page.close(true);
                $('#option_values li[rel=""]').show();
                var items_per_page = 6;
                var is_folder = false;
                carouselSearch.setFolderId(null);
                $('#go_up_root').addClass('hide');
            } else {
                var items_per_page = 10;
                var is_folder = true;
                $('#option_values li[rel="' + category_id + '"]').show();
                carouselSearch.setFolderId(category_id);
                $('#go_up_root').removeClass('hide');
            }
            var carousel = $('#pages_list #option_values').data('carousel');
            carousel.options.items_per_page = items_per_page;
            carousel.options.is_folder = is_folder;

            carouselSearch.setIsFolder(is_folder);
            carouselSearch.clearSearch(function () {
                carousel.update().slideToPage(1);
            });

        },
        resetElement: function (option_value_id) {
            var li = $('#option_value_' + option_value_id);
            var new_li = li.clone().hide().attr('rel', '');
            new_li.removeAttr("data-folder-id");
            new_li.find('input[name="category_id"]').remove();
            li.remove();
            var current_position = parseInt(new_li.attr('data-pos')) | 0;

            if (current_position >= 0) {
                var last_position = 0;
                var is_appended = false;
                $('#option_values li.option_value').each(function (i, element) {
                    if ($(this).attr('rel').isEmpty()) {
                        var element_position = $(element).attr('data-pos') | 0;
                        if (current_position >= last_position && current_position <= element_position) {
                            $(element).before(new_li);
                            is_appended = true;
                            return false;
                        }
                        last_position = element_position;
                    }
                });

                if (!is_appended) {
                    $('#option_value_customer_account').before(new_li);
                }

            } else {
                $('#option_value_customer_account').before(new_li);
            }
        }
    });
    var options = new Options();

    var outlets = {
        show: function () {
            $('#list_of_outlets').slideDown();
        },
        hide: function () {
            $('#list_of_outlets').slideUp();
        }
    };

    function createCarouselSortable() {
        $("#pages_list #option_values").sortable({
            items: '> li.sortable:visible',
            cursor: "move",
            handle: '.move_page',
            placeholder: "page_placeholder",
            axis: 'x',
            tolerance: 'pointer',
            start: function () {
                let prevButtonPosition = carousel.getPrevButtonPosition();
                let nextButtonPosition = carousel.getNextButtonPosition();

                $(document).mousemove(function (e) {
                    if (e.pageX > nextButtonPosition.x1 &&
                        e.pageX < nextButtonPosition.x2 &&
                        e.pageY > nextButtonPosition.y1 &&
                        e.pageY < nextButtonPosition.y2) {
                        carousel.startInterval("next");
                    } else {
                        carousel.stopInterval("next");
                    }

                    if (e.pageX > prevButtonPosition.x1 &&
                        e.pageX < prevButtonPosition.x2 &&
                        e.pageY > prevButtonPosition.y1 &&
                        e.pageY < prevButtonPosition.y2) {
                        carousel.startInterval("prev");
                    } else {
                        carousel.stopInterval("prev");
                    }
                });

            },
            stop: function () {
                $(document).unbind('mousemove');
            },
            update: function (e, ui) {
                var order = $('#option_values').sortable('serialize');
                $('#option_values').sortable("refresh");
                //Folder
                if ($(ui.item).find('input[name="category_id"]').length > 0) {
                    var order_url = "<?php echo $this->getUrl('folder/application/orderfeatures'); ?>?" + order;
                    reload($('#option_values'), order_url, true, function () {
                        //Order dans la feature folder
                        if ($('.manage_categories').length > 0) {
                            iframe.f.reload();
                            //Order directement dans une feature d'une catégorie
                        }
                    });
                } else {
                    var order_url = "<?php echo $this->getUrl('application/customization_features/seticonpositions'); ?>?" + order;
                    reload($('#option_values'), order_url, true, function () {
                        iframe.f.reloadTabbar();
                        $('ul#option_values li.option_value').each(function (index, value) {
                            $(this).attr('data-pos', index + 1);
                            $(this).find('a').attr('pos', index + 1);
                        });
                    });
                }
            }
        });
    }

    window.overviewEvents = [];

    var page = {
        callback: [],
        current: null,
        next: null,
        current_path: null,
        ask_confirmation: false,
        processEvents: function () {
            try {
                this.bindAddPage();
                $(".filter_category").click(function () {

                    featureSearch.clearSearch(function () {
                        carousel.update().slideToPage(1);
                    });

                    $(".filter_category").removeClass("color-blue button_handler active");
                    $(this).addClass("color-blue button_handler active");

                    var category_id = $(this).attr("rel");

                    if (!isNaN(category_id)) {
                        $(".category_option").hide();
                        $(".category_option").addClass("hide");
                        $(".category_option_" + category_id).show();
                        $(".category_option_" + category_id).removeClass("hide");
                    } else {
                        $(".category_option").show();
                        $(".category_option").removeClass("hide");
                    }

                    $("#category_title").html($(this).html());
                });
                $('.option_value').off('mouseenter mouseout');
                var pagesList = $('#pages_list');

                //Supprime option slider
                pagesList.off('click', '.delete_page');
                pagesList.on('click', '.delete_page', function (e) {
                    var confirm_message = '<?php echo __jss('Delete this page?') ?>';
                    if ($(e.currentTarget).parent().parent().attr('rel').length > 0) {
                        confirm_message = '<?php echo __jss(' "Remove this page from this folder?"'); ?>';
                    }

                    if (confirm(confirm_message)) {
                        reload($(this).parent(), '<?php echo $this->getUrl('application/customization_features/delete'); ?>', true, function (datas) {

                            iframe.f.reloadTabbar();

                            if (datas.path && iframe.f.getPath() == datas.path) {
                                if (!iframe.isHomepage()) {
                                    iframe.f.showHomepage();
                                } else {
                                    iframe.f.reload();
                                }
                            }

                            //Cas folder
                            if (datas.was_category) {

                                // Dans tous les cas, on met à jour le slider
                                options.resetElement(datas.value_id);

                                // Calcul le nombre de fonctionnalités restantes dans cette catégorie
                                var feature_count = $('#option_values').find('li:visible').length;
                                $('.button_handler[rel="' + datas.category.id + '"]').find('.features_number').html('(' + feature_count + ')');

                                // Cas aucune feature n'est ouverte -> Le folder est ouvert
                                if (!folder.current_option_id) {
                                    //Réaffiche l'élément dans le formulaire
                                    $('#add_page_' + datas.value_id).fadeIn();
                                }
                                // Cas la feature ouverte vient d'être supprimée
                                else if (folder.current_option_id == datas.value_id) {
                                    // Ferme la feature en cours, réouvre le folder
                                    folder.current_option_id = null;
                                    page.close(false);
                                }

                                //Met à jour la home pour récupérer les options assignées
                                if (iframe.isHomepage()) {
                                    iframe.f.reload();
                                }

                            } else if (datas.was_feature) {
                                // Si la fonctionnalité était un folder ET le folder en cours
                                if (datas.was_folder) {
                                    if (folder.id == datas.value_id) {
                                        folder.reset();
                                    }
                                }

                                if (page.current && page.current.attr('rel') == datas.value_id) {
                                    page.close(true);
                                }

                                $('#option_value_' + datas.value_id).remove();

                                carouselSearch.clearSearch(function () {
                                    carousel.update().slideToPage(1);
                                });

                                if (datas.was_folder) {
                                    $('#option_values > .option_value').each(function () {
                                        if ($(this).attr('data-folder-id') == datas.value_id) {
                                            options.resetElement($(this).attr('data-value-id'));
                                        }
                                    });

                                    if (!folder.id) {
                                        options.loadNewSlider('default');
                                    }
                                }
                            }

                            if (datas.page) {
                                var li = $('<li />').hide().attr('id', 'add_page_' + datas.page.id);
                                li.addClass("add_option_value col-md-3 col-sm-3 col-xs-4 category_option category_option_" + datas.page.category_id);
                                var div = $('<div />');
                                div.addClass("color-blue block_add_pages_icon");
                                li.append(div);
                                var a = $('<a />').attr('href', '<?php echo $this->getUrl('application/customization_features/save'); ?>').addClass('details').attr('rel', datas.page.id);
                                a.addClass('add_page');
                                a.append('\n\
                                <img src="' + datas.page.icon_url + '" alt="' + datas.page.name + '" title="' + datas.page.name + '" width="50" class="block" />\n\
                                <span>' + datas.page.name + '</span>\n\
                                <input type="hidden" name="option_id" value="' + datas.page.id + '"/>\n\
                            ');
                                div.append(a);
                                $('#add_page_list').append(li);
                                li.fadeIn();
                                page.bindAddPage();
                                $(".filter_category.reverse").click();
                            }
                        });
                    }
                    return false;
                });
            } catch (e) {
                console.error('page.processEvents: exception: ' + e.message);
            }
        },
        bindAddPage: function () {
            try {
                var addPage = $('.add_page');
                addPage.unbind('click');
                addPage.click(function () {
                    if (typeof folder !== undefined) {
                        folder.reset();
                        options.loadNewSlider('default');
                    }

                    reload(this.parentNode, "<?php echo $this->getUrl('application/customization_features/save'); ?>", true, function (datas) {
                        if (datas.page_html) {
                            var li = createElementFromHTML(datas.page_html);
                            li = $(li);

                            var a = li.children('a');

                            $("#option_values").append(li);
                            this.close();
                            preview.close(true);

                            page.load(a);

                            iframe.f.reloadTabbar();

                            //Scroll to top after adding a feature
                            var d = (navigator.userAgent && navigator.userAgent.indexOf('WebKit')) != -1 ? document.body : document.documentElement;
                            $(d).animate({scrollTop: $('body').offset().top});
                            page.processEvents();

                            carouselSearch.clearSearch(function () {
                                setTimeout(function () {
                                    carousel.update().slideToItem($('li#' + li.attr('id')));
                                }, 1400);
                            });
                            featureSearch.clearSearch();
                        }

                        if (datas.my_account) {
                            let myAccountLi = createElementFromHTML(datas.my_account);
                            myAccountLi = $(myAccountLi);

                            let idAccount = myAccountLi.attr("id");
                            // Adds only if not here
                            if ($("#" + idAccount).length === 0) {
                                $('#option_value_more_items').before(myAccountLi);
                            }
                        }

                        if (datas.delete_features && datas.delete_features.length) {
                            for (var i = 0; i < datas.delete_features.length; i++) {
                                $('#add_page_' + datas.delete_features[i]).remove();
                            }
                        }
                    }.bind(page));
                    return false;
                });
                preview.processEvents();
            } catch (e) {
                console.error('page.bindAddPage: exception: ' + e.message);
            }
        },
        load: function (a, show_mobile_page) {
            try {
                this.next = $(a);

                if (typeof show_mobile_page == 'undefined') {
                    show_mobile_page = true;
                }

                if (this.next.parent().hasClass('selected')) {
                    folder.current_option_id = null;
                    if (this.next.hasClass('folder')) {
                        folder.id = null;
                    }

                    this.next = null;
                    this.close(true);
                    return this;
                }

                var url = this.next.attr('href');

                loader.show('page.load');
                $.ajax({
                    url: url,
                    dataType: 'json',
                    success: function (datas) {
                        if (datas.html) {

                            if (this.next.hasClass('folder')) {
                                folder.id = this.next.attr('rel');
                            }
                            else if (folder.id) {
                                folder.current_option_id = this.next.attr('rel');
                            }

                            if (this.current) {
                                this.close(false);
                            }

                            this.next.addClass('active');

                            this.current_path = datas.path;

                            var page = $('#page');
                            var div = page.children('div');
                            var new_div = $('<div />').css('left', page.width()).attr('pos', this.next.attr('pos')).hide();

                            new_div.append(datas.html);
                            new_div.appendTo(page);

                            this.fireCallback('colorize_icon');
                            this.fireCallback('willappear');

                            page.show();
                            $(".option_value.selected").removeClass("selected");
                            this.next.parent().addClass("selected");

                            var didappear_callback = function () {
                                this.fireCallback('bind_icons_events');
                                this.fireCallback('didappear');
                                this.fireCallback('prepare_logo_uploader');
                            }.bind(this);

                            this.current = this.next;

                            $('#title_editor').html(this.next.children('span').attr('rel'));

                            if (show_mobile_page) {

                                // Check if loading is complete
                                if ((typeof iframe != "undefined") && (typeof iframe.f != "undefined") && (typeof iframe.f.setPath == "function")) {
                                    iframe.f.setPath(this.current_path);
                                } else {
                                    window.overviewEvents.push(this.current_path);
                                }

                                page.next = null;
                                loader.hide('page.load 2');
                            }
                            else {
                                loader.hide('page.load 3');
                            }

                            animation.fold(div, new_div, this.getCallback('diddisappear'), didappear_callback);

                            $('#header_editor').fadeIn();

                            if (typeof background_image == 'object' && typeof background_image.init == 'function') {
                                background_image.init();
                            }
                            if (typeof option_layout == 'object' && typeof option_layout.init == 'function') {
                                option_layout.init();
                            }
                        }
                        else if (datas.message) {
                            var page_message = new AlertMessage(datas.message);
                            page_message.addButton(true);
                            page_message.addLoader(true);
                            page_message.setTimer(false);
                            page_message.isError(true);
                            page_message.show();
                            if (datas.url) {
                                window.location = datas.url;
                            }
                            else {
                                loader.hide('page.load 4');
                            }
                        }
                        else if (datas.url) {
                            window.location = datas.url;
                        }
                        else {
                            loader.hide('page.load 5');
                        }

                    }.bind(this),
                    error: function (error) {
                        console.log("error", error);
                        if (error.status === 403) {
                            feature_form_warning("<?php echo __js("", '"'); ?>");
                        } else {
                            feature_form_error("<?php echo __js("An error occurred while loading the feature.", '"'); ?>");
                        }
                        this.next = null;
                    }
                });
            } catch (e) {
                console.error('page.load: exception: ' + e.message);
            }
        },
        reload: function () {
            try {
                $(this.current).parent().removeClass('selected');
                this.load(this.current);
            } catch (e) {
                console.error('page.load: exception: ' + e.message);
            }
        },
        close: function (animated) {
            try {
                if (!this.current) return this;

                if (typeof background_image == 'object' && typeof background_image.destroy == 'function') {
                    background_image.destroy();
                }
                if (typeof option_layout == 'object' && typeof option_layout.destroy == 'function') {
                    option_layout.destroy();
                }

                $('#page').slideUp(animated ? 300 : 0, function () {
                    this.fireCallback('destroy_logo_uploader');
                    this.fireCallback('unbind_icons_events');
                    this.fireCallback('willdisappear');
                    $('#page').html('');
                    this.fireCallback('diddisappear');
                }.bind(this));
                $('#header_editor').slideUp(animated ? 300 : 0, function () {
                    $('#title_editor').html('');
                });

                var optionValueSelected = $('.option_value.selected');

                $('a.details.active').removeClass('active');

                if (this.current) {

                    var recursive = !folder.current_category_id;

                    if (this.current.hasClass('folder') && !folder.current_category_id) {
                        folder.reset();
                    }

                    if (folder.id && folder.current_category_id && !folder.current_option_id) {
                        var aElement = $('li#option_value_' + folder.id + ' a[href]').get(0);
                        page.load(aElement, false);
                    }

                    if (!folder.id && !folder.current_option_id && this.current.attr('rel') != folder.id) {
                        if (!this.next) {
                            iframe.f.showHomepage();
                        }
                    }
                }

                this.current = null;
            } catch (e) {
                console.error('page.close: exception: ' + e.message);
            }
        },
        slide: function (oldDiv, newDiv, dir) {
            try {
                oldDiv.addClass('absolute');
                var page = $('#page');
                var oldLeft = page.width();
                var newLeft = oldLeft * -1;
                if (dir == 'right') {
                    oldLeft *= -1;
                    newLeft *= -1;
                }

                oldDiv.animate({left: oldLeft}, 300, null, function () {
                    oldDiv.remove();
                });
                newDiv.css('left', newLeft).animate({left: 0}, 300, null, function () {
                    newDiv.removeClass('absolute');
                });
            } catch (e) {
                console.error('page.slide: exception: ' + e.message);
            }
        },
        setCallback: function (type, callback) {
            try {
                this.callback[type] = callback;
            } catch (e) {
                console.error('page.setCallback: exception: ' + e.message);
            }
        },
        getCallback: function (type) {
            try {
                return typeof this.callback[type] == 'function' ? this.callback[type] : function () {
                };
            } catch (e) {
                console.error('page.getCallback: exception: ' + e.message);
            }
        },
        fireCallback: function (type) {
            try {
                if (typeof this.callback[type] == 'function') {
                    this.callback[type]();
                }
                this.callback[type] = null;
            } catch (e) {
                console.error('page.fireCallback: exception: ' + e.message);
            }

        },
        resetBorder: function () {
            // Deprecated, do nothing!
        }
    };

    var folder = {
        id: null,
        root_category_id: null,
        current_category_id: null,
        current_option_id: null,
        reset: function () {
            this.id = null;
            this.root_category_id = null;
            this.current_category_id = null;
            this.current_option_id = null;
        },
        getPageId: function () {
            var page_id = null;
            if (this.root_category_id && this.current_category_id) {
                if (this.root_category_id == this.current_category_id) {
                    page_id = this.id;
                }
                else {
                    page_id = 'subcategory_' + this.current_category_id;
                }
            }
            return page_id;
        },
        isRootCategory: function () {
            var is_root_category = false;
            if (this.current_category_id && this.root_category_id) {
                is_root_category = this.current_category_id == this.root_category_id;
            }
            else if (!this.root_category_id) {
                is_root_category = true;
            }
            return is_root_category;
        }
    }

    var animation = {
        slide: function (oldDiv, newDiv, disappearCallback, appearCallback) {

            if (typeof disappearCallback == 'undefined') disappearCallback = function () {
            }
            if (typeof appearCallback == 'undefined') appearCallback = function () {
            }

            var dir = 'right';
            if (oldDiv.attr('pos')) dir = oldDiv.attr('pos') <= newDiv.attr('pos') ? 'right' : 'left';

            oldDiv.css('width', oldDiv.width());
            oldDiv.css('position', 'absolute');
            oldDiv.parent().addClass('relative');
            newDiv.css('width', newDiv.width());
            newDiv.css('position', 'absolute');

            var oldLeft = oldDiv.width();
            var newLeft = oldDiv.width() * -1;
            if (dir == 'right') {
                oldLeft *= -1;
                newLeft *= -1;
            }

            var newAppearCallback = function () {
                appearCallback();
            }

            if (newLeft == 0) newLeft = newDiv.width();
            oldDiv.animate({left: oldLeft, opacity: 0}, 500, null, function () {
                oldDiv.hide();
                disappearCallback();
            });
            newDiv.css('left', newLeft).show().animate({left: 0, opacity: 1}, 500, null, function () {
                newAppearCallback();
            });

        },

        fold: function (oldDiv, newDiv, disappearCallback, appearCallback) {

            if (!disappearCallback) disappearCallback = function () {
            }
            if (!appearCallback) disappearCallback = function () {
            }

            oldDiv.remove();
            disappearCallback();
            page.fireCallback('didremove');
            $('#page').animate({height: newDiv.outerHeight()}, 300, null, function () {
                newDiv.show();//css('left', 0);//.fadeIn(300, function() {
                appearCallback();
                $('#page').animate({height: newDiv.outerHeight()}, 300, null, function () {
                    $(this).css('height', 'auto')
                });
                //});
            });

        }
    }

    var preview = {
        tolerance: 180,
        mask: null,
        processEvents: function () {

            $('.show_previews').unbind('click');
            $('.show_previews').click(function () {
                if ($('#previews').is(':visible')) {
                    if (!$('#previews_' + $(this).attr('rel')).is(':visible')) {
                        preview.toggle($(this).attr('rel'));
                    }
                }
                else {
                    preview.open($(this).attr('rel'));
                }

                return false;
            });

            $('.close_previews').unbind('click');
            $('.close_previews').click(function () {
                preview.close(true);
            });

        },
        open: function (id) {

            this.hideLists(false);

            if (page.current) {
                page.close(false);
            }

            $(window).unbind('resize');
            $(window).resize(this.resize.bind(this));

            this.resize();

            $('#previews_' + id).show();
            $('#previews').fadeIn();
            $('#preview_' + id).find('ul.pictures').carousel({items_per_page: 1});

        },
        close: function (animated) {
            if (animated) {
                $('#previews').fadeOut(300, function () {
                    $('.preview').hide()
                });
            }
            else {
                $('#previews').hide();
                $('.preview').hide();
            }
        },
        toggle: function (id) {
            $('.preview').hide();
            $('#previews_' + id).fadeIn();
        },
        hideLists: function (animated) {
            if (animated) $('.preview').fadeOut(150);
            else $('.preview').hide();
        },
        resize: function (all) {
            var selector = ".details";
            if (!all) selector += ":visible";
        }
    }

    var feature = {
        alert: new AlertMessage('', true),
        create: function (appearCallback, disappearCallback) {
            this.slide($('#list'), $('#new'), 'down', appearCallback, disappearCallback);
        },
        edit: function (appearCallback, disappearCallback) {
            if ($('#edit').attr('id')) {
                this.slide($('#list'), $('#edit'), 'down', appearCallback, disappearCallback);
                if ($('button.upload_comment_picture').length > 0 && !$('button.upload_comment_picture').is(':visible')) {
                    $('input.uploader').show();
                }
            }
        },
        list: function (appearCallback, disappearCallback) {
            var oldDiv = $('#edit').is(':visible') ? $('#edit') : $('#new');
            this.slide(oldDiv, $('#list'), 'up', appearCallback, disappearCallback);
        },
        slide: function (oldDiv, newDiv, dir, appearCallback, disappearCallback) {

            if (typeof disappearCallback == 'undefined') disappearCallback = function () {
            }
            if (typeof appearCallback == 'undefined') appearCallback = function () {
            }

            var oldLeft = oldDiv.width();
            var newLeft = oldDiv.width() * -1;
            if (dir == 'down') {
                oldLeft *= -1;
                newLeft *= -1;
            }

            var newAppearCallback = function () {
                appearCallback();
            }

            if (newLeft == 0) newLeft = newDiv.width();
            oldDiv.animate({up: oldLeft, opacity: 0}, 100, null, function () {
                oldDiv.hide();
                disappearCallback();
            });
            newDiv.css('up', newLeft).show().animate({up: 0, opacity: 1}, 500, null, function () {
                newAppearCallback();
                $(this).removeAttr('style');
            });
            var height = $('#icon_and_name').outerHeight(true) + newDiv.outerHeight(true);
            if ($('#mcomerce_tabs_header').is(':visible')) height += $('#mcomerce_tabs_header').outerHeight(true);
            $('#page').animate({height: height + 50}, 500, null, function () {
                $(this).removeAttr('style');
            });

        },
        appMustBePublished: function (message) {
            if (!message) message = '<?php echo addslashes(__('You must have published your application to access this feature')); ?>';
            this.alert.setMessage(message);
            this.alert.isError(1);
            this.alert.show();
        }
    }

    var gmaps = {
        isLoaded: false,
        map: null,
        circle: null,
        marker: null,
        searchBox: null,
        radius: 10,
        default_radius: 10,
        place: null,
        init: function () {

            if (!this.isLoaded) {

                $('#push_map_canvas').css({width: '100%', height: 400});
                this.map = new google.maps.Map(document.getElementById('push_map_canvas'), {
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });

                this.isLoaded = true;
            }

            this.setRadius(this.default_radius);

            $('.gmaps_field').keypress(function (e) {
                if (e.keyCode == 13) {
                    $(this).change();
                    return false;
                }
            });

            $('#push_radius').change(function (e) {
                var radius;
                var val = parseFloat($(e.target).val().replace(',', '.'));
                if (isNaN(val) || val == 0) {
                    radius = this.default_radius;
                    $(e.target).val(radius);
                }
                else {
                    radius = val;
                }

                this.setRadius(radius).setCircle();

                $('#push_radius_receiver').val(radius);
            }.bind(this));

            $('#push_radius').val(this.default_radius);
            $('#push_radius_receiver').val(this.default_radius);

            var defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(38.581572, -121.4944),
                new google.maps.LatLng(32.715329, -117.157255));
            this.map.fitBounds(defaultBounds);

            var input = (document.getElementById('push_target'));
            this.searchBox = new google.maps.places.SearchBox(input);

            google.maps.event.addListener(this.searchBox, 'places_changed', function () {
                this.changePlace();
            }.bind(this));

            google.maps.event.addListener(this.map, 'bounds_changed', function () {
                var bounds = this.map.getBounds();
                this.searchBox.setBounds(bounds);
            }.bind(this));

            return this;

        },

        changePlace: function () {

            var places = this.searchBox.getPlaces();

            if (this.marker) {
                this.marker.setMap(null);
            }

            if (typeof places != 'undefined' && places.length) {
                this.place = places[0];

                this.marker = new google.maps.Marker({
                    map: this.map,
                    title: this.place.name,
                    position: this.place.geometry.location
                });

                $('#push_latitude_receiver').val(this.place.geometry.location.lat());
                $('#push_longitude_receiver').val(this.place.geometry.location.lng());

                this.setCircle();

            }

            return this;

        },

        setCircle: function () {

            var sunCircle = {
                strokeColor: "#12f4ea",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#12f4ea",
                fillOpacity: 0.35,
                map: this.map,
                position: this.place.geometry.location,
                radius: this.radius
            };

            if (this.circle) {
                this.circle.setMap(null);
            }

            this.circle = new google.maps.Circle(sunCircle);
            this.circle.bindTo('center', this.marker, 'position');

            this.map.fitBounds(this.circle.getBounds());

            return this;
        },

        setRadius: function (radius) {
            this.radius = radius * 1000;
            return this;
        },

        show: function () {
            $('#push_map_canvas_container').fadeIn(150);
            $('#gmaps_datas').fadeIn(200);
            this.activateFields();
        },
        hide: function () {
            $('#push_map_canvas_container').fadeOut(150);
            $('#gmaps_datas').fadeOut(200);
        },
        activateFields: function () {
            $('.gmaps_field').removeAttr('disabled');
            $('.is_geolocated').show();
        },
        deactivateFields: function () {
            $('.gmaps_field').attr('disabled', 'disabled');
            $('.is_geolocated').hide();
        },
        destroy: function () {
            if (this.isLoaded) {
                $('#push_map_canvas_container').hide();
                $('.location_receiver').attr('disabled', 'disabled');
                $('.gmaps_field').unbind('keypress');
                $('#push_radius').unbind('change');
//                $('#push_map_canvas').html('');
                $('#push_latitude').html('');
                $('#push_longitude').html('');
                this.radius = this.default_radius;
            }
        }

    };

    page.processEvents();

</script>

<script type="text/javascript">

    var FolderForm = Class.extend({
        value_id: null,
        init: function (datas) {

            this.value_id = datas.value_id;
            $('#folder_name').html('"' + datas.title + '"');
            $('.option_value_category_id').val(folder.current_category_id);
            $('.folderForm').validate();
            this.processEvents();
            if (category.open == 'options') {
                this.showOptions();
            } else {
                this.showForm();
            }
            category.open = '';
        },
        processEvents: function () {
            var __that = this;

            $('.folderForm_cont').on('click', '#upload_folder_background', function () {
                $('#folder_background_file').trigger('click');
                return false;
            });

            //Supprime l'image de la catégorie
            $('.folderForm_cont').on('click', '#remove_background_img', function () {
                this.deleteCatImage();
                return false;
            }.bind(this));

            $('.folderForm_cont .form_content input').keypress(function (event) {
                if (event.which == 13) {
                    event.preventDefault();
                    $('.folderForm').submit();
                }
            });

            $('.folderForm_cont').on('submit', '.folderForm', function () {
                reload($('.folderForm'), $('.folderForm').attr('action'), true, function (datas) {
                    if (datas.success) {
                        $('.folderForm #file').val('');
                        //si ajout nouvelle cat
                        if ($('#category_dummy').length > 0) {

                            folder.current_category_id = datas.category_id;
                            //Liste catégories
                            $('.folderForm input#category_id').val(datas.category_id);
                            $('#category_dummy').attr('id', 'category_' + datas.category_id);
                            $('li#category_' + datas.category_id).find('.fa fa-sort-h icon-move').removeAttr('style');
                            if (category.root != '') {
                                $('li#category_' + datas.category_id).find('.delete_category').removeAttr('style');
                            }
                            $('li#category_' + datas.category_id).find('.edit_category').removeAttr('style');
                            $('li#category_' + datas.category_id).find('i.delete_category').attr('rel', datas.category_id);
                            $('li#category_' + datas.category_id).find('i.edit_category').attr('rel', datas.category_id);
                            $('li#category_' + datas.category_id).find('i.edit_category').attr('onclick', 'category.loadForm(' + datas.category_id + ',' + datas.parent_id + ');');
                            $('li#category_' + datas.category_id).find('.button_handler').attr('rel', datas.category_id);
                            $('li#category_' + datas.category_id).find('a').attr('rel', datas.category_id);
                            $('.folderForm').attr('rel', datas.category_id);
                            $('.folder_listing input[name="category_id"]').each(function (index) {
                                $(this).val(datas.category_id);
                            });
                            $('.dummy_text').removeClass('dummy_text').addClass('title');

                            //Ajout root
                            if (category.root == '') {
                                $('#left_category #no_item span').eq(1).html('<?php echo addslashes(__('to add a subfolder.')) ?>');
                                category.root = datas.category_id;
                                folder.root_category_id = datas.category_id;
                                parent_id = 'default';
                                tabbar_names[__that.value_id] = $('#title').val();
                            }

                            //Formulaire
                            options.loadNewSlider(datas.category_id, __that.value_id);

                            //clean sortable
                            $('.categories_list ul:empty').remove();
                            __that.showOptions();
                        } else {
                            if (category.root == datas.category_id) {
                                tabbar_names[__that.value_id] = $('#title').val();
                            }
                        }
                    }
                }, function () {
                });
                return false;
            });

            //Sauvegarde l'upload d'image de la catégorie
            $('.folderForm_cont').on('click', '.save_background_image', function () {
                $('.folderForm').submit();
                return false;
            });

            //Keyup titre
            $('.folderForm_cont #title').keyup(function (e) {
                this.titleKeyup($(e.target));
                var cat_id = $('.folderForm').find('input#category_id').val();
            }.bind(this));

            //Ajoute une feature
            $('#page_list_folder').on('click', '.add_feature', function (e) {
                this.addFeature($(e.currentTarget));
                return false;
            }.bind(this));

            //Upload image
            $('#folder_background_file').fileupload({
                dataType: 'json',
                add: function (e, data) {
                    data.submit();
                    folder_background_uploader.showProgressbar();
                },
                progressall: function (e, data) {
                    folder_background_uploader.moveProgressbar(data);
                },
                fail: function (el, data) {
                    folder_background_uploader.hide();
                    folder_background_uploader.showError(JSON.parse(data.jqXHR.responseText).message);
                },
                done: function (e, data) {
                    if (data.result.error) {
                        folder_background_uploader.hide();
                        folder_background_uploader.showError(data.result.message);
                    }
                    if (data.result.success) {
                        folder_background_uploader.hide();
                        var params = [];
                        params["url"] = '<?php echo $this->getUrl('template/crop/crop'); ?>';
                        params["file"] = data.result.files;
                        params["output_w"] = 640;
                        params["output_h"] = 400;
                        params["output_url"] = '<?php echo str_replace('/', '$', $this->getUrl('folder/application/crop')) ?>';
                        params["uploader"] = 'folder_background_uploader';
                        folder_background_uploader.crop(params);
                        folder_background_uploader.callback = function (file) {
                            $('.folderForm #file').val(file);
                            $('.folderForm #remove_picture').val('');
                            $('#upload_folder_background').hide();
                            $('#background_img_src').attr('src', '<?php echo Core_Model_Directory::getTmpDirectory(false)?>/' + file);
                            $('#remove_background_img').show();
                            $('#background_img_src').show();
                        }
                    }
                }
            });
        },
        showForm: function () {
            $('#add_page_to_folder').hide();
            $('.folderForm_cont form').fadeIn('fast');
        },
        showOptions: function () {
            $('.folderForm_cont form').hide();
            $('#add_page_to_folder').fadeIn('fast');
        },
        deleteCatImage: function () {
            $('.folderForm #file').val('');
            $('.folderForm #remove_picture').val('1');
            $('#remove_background_img').hide();
            $('#background_img_src').hide();
            $('#upload_folder_background').show();
        },
        titleKeyup: function (element) {
            var rel = $('.folderForm').attr('rel');
            var option_id = this.value_id;

            var subval = category.formatCategoryName(element.val());
            var option_val = category.formatOptionName(element.val());

            $('.folder_name').html(element.val());

            if ($('span.dummy_text').length > 0) {
                $('span.dummy_text').html(subval);
            } else {
                $('#title_category_' + rel).html(subval);
            }

            //Si root, met à jour le nom de la feature
            if (category.root == '' || $('.button_handler.active.inner_content').attr('rel') == category.root) {
                $('input#tabbar_name').val(element.val());
                var subval = element.val();
                //if (subval.length > 8) subval = subval.substring(0, 3).trim() + '...' + subval.substring(subval.length - 4, subval.length).trim();
                $('#tabbar_name_' + this.value_id).html(subval);
            }
        },
        addFeature: function (link) {
            reload(link, "<?php echo $this->getUrl('folder/application/addfeature'); ?>", true, function (datas) {
                if (datas.success) {
                    var id = link.attr('rel');
                    var cat_id = link.find('input[name="category_id"]').val();
                    var $slider_li = $('#option_values li#option_value_' + id);
                    var $form_li = link.parent();
                    $form_li.fadeOut(400);
                    var $clone = $slider_li.clone();
                    $slider_li.remove();
                    $('#option_values').append($clone);
                    $clone.attr('rel', cat_id);
                    $clone.find('.actions').append('<input type="hidden" value="' + cat_id + '" name="category_id">');
                    $clone.find('canvas').remove();
                    $clone.attr('data-folder-id', datas.folder_id);
                    $clone.find('img').show();
                    $clone.fadeIn(400);
                    carouselSearch.clearSearch(function () {
                        setTimeout(function () {
                            carousel.update().slideToItem($('li#' + $clone.attr('id')));
                        }, 1000);
                    });
                    featureSearch.clearSearch();

                    var feature_count = $('#option_values li.option_value:visible').length;
                    $('.button_handler[rel="' + cat_id + '"]').find('.features_number').html('(' + feature_count + ')');
                    if (iframe.f.isHomepage()) {
                        iframe.f.reload();
                    }
                }
            });
        },

        destroy: function () {
            $('.folderForm_cont').off('click', '#upload_folder_background');
            $('.folderForm_cont').off('click', '#remove_background_img');
            $('.folderForm_cont .form_content input').unbind('keypress');
            $('.folderForm_cont').off('submit', '.folderForm');
            $('.folderForm_cont').off('click', '.save_background_image');
            $('.folderForm_cont #title').unbind('keyup');
            $('.folderForm_cont #subtitle').unbind('keyup');
            $('#page_list_folder').off('click', '.add_feature');
        }
    });


    /** =====     SEARCH     ===== */
    var carouselSearch = new initSearch(
        '#pages_content .list-search input.search_filter_carousel',
        '#pages_content .list-search .clear',
        '#pages_content .list-search .empty',
        '#pages_content .search_carousel_li',
        function () {
            carousel.update().slideToPage(1);
        }
    );

    $('#pages_content .search_carousel_li .actions .move_page')
        .on('mousedown', function (e) {
            carouselSearch.clearSearch(function () {
                var liElement = $(e.target).closest('li.search_carousel_li');
                carousel.update(true).slideToItem(liElement);
            }, true);
        });

    var featureSearch = new initSearch(
        '#add_pages_content .list-search input.search_filter_feature',
        '#add_pages_content .list-search .clear',
        '#add_pages_content .list-search .empty',
        '#add_page_list .feature_search'
    );

    /** =====     SEARCH     ===== */


    function bindGmapsSearchBox(input) {

        var search_box = new google.maps.places.SearchBox(input.get(0));
        input.data("search_box", search_box);
        google.maps.event.addListener(search_box, 'places_changed', function () {
            var position = input.attr("rel");
            var places = input.data("search_box").getPlaces();
            if (places) {
                var place = places[0];
                $('#cms_latitude_' + position).val(place.geometry.location.lat());
                $('#cms_longitude_' + position).val(place.geometry.location.lng());
            }
        });

    }

    // media query
    if (matchMedia) {
        var mq = window.matchMedia("(min-width: 1127px) and (max-width: 1380px)");
        var mql = window.matchMedia("(min-width: 1014px) and (max-width: 1126px)");
        mq.addListener(WidthChange);
        mql.addListener(WidthChangeV2);
        WidthChange(mq);
        WidthChangeV2(mql);
    }

    function WidthChange(mq) {
        if (mq.matches) {
            $('#add_page_list .add_option_value.col-md-3').addClass('col-md-4').removeClass('col-md-3');
        } else {
            $('#add_page_list .add_option_value.col-md-4').addClass('col-md-3').removeClass('col-md-4');
        }
    }

    function WidthChangeV2(mql) {
        if (mql.matches) {
            $('#add_page_list .add_option_value.col-md-3').addClass('col-md-5').removeClass('col-md-3');
            $('#add-pages .col-md-3').addClass('col-md-4').removeClass('col-md-3');
            $('#add-pages .col-md-9').addClass('col-md-8').removeClass('col-md-9');
        } else {
            $('#add_page_list .add_option_value.col-md-5').addClass('col-md-3').removeClass('col-md-5');
            $('#add-pages .col-md-4').addClass('col-md-3').removeClass('col-md-4');
            $('#add-pages .col-md-8').addClass('col-md-9').removeClass('col-md-8');
        }
    }

</script>

<style>
    /*PREVIEW MODAL*/
    #previews {
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        z-index: 10001;
    }

    #previews #preview_mask {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background-color: black;
        opacity: 0.8;
        z-index: 10000;
    }

    #previews .previews_list {
        position: relative;
        width: 900px;
        max-height: 635px;
        min-height: 355px;
        margin: 20px auto;
        background-color: white;
        color: #404040;
        z-index: 10001;
    }

    #previews .previews_list .preview {
        padding: 15px;
    }

    #previews ul {
        padding: 0;
    }

    #previews li {
        list-style: none;
    }

    .carousel-indicators li {
        border: 1px solid #000;
    }

    .img-responsive, .thumbnail > img, .thumbnail a > img, .carousel-inner > .item > img, .carousel-inner > .item > a > img {
        height: 480px;
    }

    @media screen and (max-width: 960px) {
        #previews .previews_list {
            width: 90%;
            max-width: 90%;
        }
    }

    /*END PREVIEW MODAL*/

    /*carousel*/
    #carousel-container ul li.page_placeholder {
        width: 100px;
        height: 95px;
        display: block;
        float: left;
    }

    #carousel-container ul li a.details.selected, .pages #carousel-container ul li a.details.hover, .pages #carousel-container ul li.page_placeholder {
        padding: 5px;
        border-radius: 7px;
    }

    #move_page {
        margin-top: 1px !important;
    }

    #option_values {
        transition: all 0.4s ease 0s;
    }

    /* Features */
    #page {
        margin-bottom: 15px;
    }

    /* carret */
    .carret li a.button_handler {
        transition: none 0s ease 0s;
        position: relative;
    }

    .carret li a.button_handler.active:after,
    .carret li a.button_handler.active:before,
    .carret li a.button_handler:hover:after,
    .carret li a.button_handler:hover:before {
        left: 100%;
        border: solid transparent;
        content: " ";
        height: 0;
        width: 0;
        position: absolute;
        pointer-events: none;
        z-index: 10;
    }

    .carret li a.button_handler.active:after, .carret li a.button_handler:hover:after {
        border-color: rgba(136, 183, 213, 0);
        border-left-color: #1397C8;
        border-width: 15px;
        top: 50%;
        margin-top: -15px;
        z-index: 10;
    }

    .carret li a.button_handler:hover {
        transition: none 0s ease 0s;
    }

    #add_page_list .block_add_pages_icon {
        padding-top: 10px;
        padding-bottom: 10px;
        transition: all 0.3s ease 0s;
        -moz-transition: all 0.3s ease 0s;
        -webkit-transition: all 0.3s ease 0s;
        -o-transition: all 0.3s ease 0s;
        width: 100%;
    }

    li:nth-child(1) i.fa.fa-arrows-h, li:nth-child(1) i.fa.fa-arrows-h:before {
        content: "\f178";
        cursor: e-resize;
    }

    li:nth-last-child() i.fa.fa-arrows-h, li:nth-last-child() i.fa.fa-arrows-h:before {
        content: "\f177";
    }

    .option_value a.radio {
        display: inherit;
        margin: auto;
    }

    #pages_list {
        padding-bottom: 5px;
    }

    .bt-import-fb {
        position: absolute;
        right: 0;
        width: auto;
        padding: 5px;
        text-transform: uppercase;
        margin-right: 6px;
    }

    div.default_size_details {
        background-size: 50px 50px;
        background-position: 15px 10px;
        background-repeat: no-repeat;
    }
</style>
    <?php $cacheOutput->end(["cache_admin", "app_{$appId}", "admin_{$adminId}"]); endif; ?>

