<?php
$currentLink = $this->getCurrentLink();
$editor = $this->getAdmin()->getWhiteLabelEditor();
$request = $this->getRequest();
$session = $this->getSession();
$customLinks = Siberian_Module::getEditorMenus();

/**
* <?php $settings_links = array('push', 'url', 'api_keys', 'module'); ?>
* <?php $resource = new Acl_Model_Resource(); ?>
* <?php $editor_url = $resource->getFirstEditorResourceAllowed($this); ?>
* <?php if($this->getApplication()) : ?>
 * */

$editorAccess = [
    'editor_design',
    'editor_colors',
    'editor_features',
    'editor_application',
    'editor_publication'
];

// Awesome menu
$editorTree = [
    'editor' => [
        'hasChilds' => true,
        'isVisible' => $this->_canAccessAnyOf($editorAccess),
        'label' => __('Editor'),
        'id' => 'sidebar-left-group-editor',
        'is_current' => false,
        'url' => $this->getUrl('/'),
        'icon' => 'fa fa-pencil',
        'childs' => [
            'design' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_design"),
                'label' => __('Design'),
                'icon' => 'icon ion-sb-layout1',
                'url' => $this->getUrl('application/customization_design_style/edit'),
                'is_current' => ('editor_design' === $currentLink),
            ],
            'colors' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_colors"),
                'label' => __('Colors'),
                'icon' => 'icon ion-sb-palette',
                'url' => $this->getUrl('application/customization_design_colors/edit'),
                'is_current' => ('editor_colors' === $currentLink),
            ],
            'features' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_features"),
                'label' => __('Features'),
                'icon' => 'icon ion-cube',
                'url' => $this->getUrl('application/customization_features/list'),
                'is_current' => ('editor_features' === $currentLink),
            ],
            'application' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_application"),
                'label' => __('Application'),
                'icon' => 'icon ion-android-phone-portrait',
                'url' => $this->getUrl('application/customization_publication_app'),
                'is_current' => ('editor_application' === $currentLink),
            ],
            'publication' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_publication"),
                'label' => __('Publication'),
                'icon' => 'icon ion-sb-origami',
                'url' => $this->getUrl('application/customization_publication_infos'),
                'is_current' => ('editor_publication' === $currentLink),
            ],
        ],
    ],
    'users' => [
        'hasChilds' => false,
        'isVisible' => $this->_canAccess("users"),
        'label' => __('Users'),
        'id' => 'sidebar-left-users',
        'is_current' => ('customer' === $currentLink),
        'url' => $this->getUrl('customer/application/list'),
        'icon' => 'icon ion-sb-group',
    ],
    'promote' => [
        'hasChilds' => false,
        'isVisible' => $this->_canAccess("promote"),
        'label' => __('Promote'),
        'id' => 'sidebar-left-promote',
        'is_current' => ('promote' === $currentLink),
        'url' => $this->getUrl('application/promote'),
        'icon' => 'icon ion-sb-megaphone',
    ],
    'messages' => [
        'hasChilds' => false,
        'isVisible' => $this->_canAccess("editor_settings_messages"),
        'label' => __('Messages'),
        'icon' => 'fa fa-envelope',
        'url' => $this->getUrl('message/application'),
        'is_current' => ('settings_message' === $currentLink),
    ],
    'analytics' => [
        'hasChilds' => true,
        'isVisible' => $this->_canAccessAnyOf(['analytics_application', 'analytics_feature']),
        'label' => __('Analytics'),
        'id' => 'sidebar-left-group-analytics',
        'is_current' => false,
        'url' => $this->getUrl('/'),
        'icon' => 'icon ion-sb-data',
        'childs' => [
            'analytics_application' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("analytics_application"),
                'label' => __('App analytics'),
                'icon' => 'fa fa-area-chart',
                'url' => $this->getUrl('application/analytics_application'),
                'is_current' => ('analytics_application' === $currentLink),
            ],
            'analytics_feature' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("analytics_application"),
                'label' => __('Feature Analytics'),
                'icon' => 'fa fa-bar-chart',
                'url' => $this->getUrl('application/analytics_feature'),
                'is_current' => ('analytics_feature' === $currentLink),
            ],
        ],
    ],
    'payment_gateways' => [
        'hasChilds' => true,
        'isVisible' => false,
        'label' => p__("payment_method", "Payment gateways"),
        'id' => 'sidebar-left-group-payment-gateways',
        'is_current' => false,
        'url' => $this->getUrl('/'),
        'icon' => 'fa fa-credit-card',
        'childs' => [],
    ],
    'settings' => [
        'hasChilds' => true,
        'isVisible' => $this->_canAccessAnyOf(['editor_settings_tc', 'editor_settings_apis', 'editor_settings_domain', 'editor_settings_advanced', 'editor_settings_messages']),
        'label' => __('Settings'),
        'id' => 'sidebar-left-group-settings',
        'is_current' => false,
        'url' => $this->getUrl('/'),
        'icon' => 'icon ion-sb-cogs',
        'childs' => [
            'editor_settings_tc' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_settings_tc"),
                'label' => __('Terms & Conditions'),
                'icon' => 'fa fa-file-text',
                'url' => $this->getUrl('application/settings_tc'),
                'is_current' => ('settings_tc' === $currentLink),
            ],
            'editor_settings_domain' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_settings_domain"),
                'label' => __('Domain'),
                'icon' => 'fa fa-link',
                'url' => $this->getUrl('application/settings_domain'),
                'is_current' => ('settings_domain' === $currentLink),
            ],
            'editor_settings_advanced' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_settings_advanced"),
                'label' => __('Advanced'),
                'icon' => 'fa fa-cogs',
                'url' => $this->getUrl('application/settings_advanced'),
                'is_current' => ('settings_advanced' === $currentLink),
            ],
            'editor_settings_apis' => [
                'hasChilds' => false,
                'isVisible' => $this->_canAccess("editor_settings_apis"),
                'label' => __('API Keys'),
                'icon' => 'fa fa-key',
                'url' => $this->getUrl('application/settings_apis'),
                'is_current' => ('settings_apis' === $currentLink),
            ],
        ],
    ],
];

if ($customLinks) {
    $oneIsvisible = false;
    $childs = [];
    foreach ($customLinks as $module => $links) {
        foreach ($links as $link) {

            $acl = isset($link['acl_code']) ? $this->_canAccess($link['acl_code']) : true;
            $isCurrent = isset($link['code']) ? ($link['code'] === $currentLink) : false;
            $title = $link['title'];
            $icon = $link['icon'];
            $url = $link['link'];
            $slug = slugify($title);

            $childs[$slug] = [
                'hasChilds' => false,
                'isVisible' => $acl,
                'label' => $title,
                'icon' => $icon,
                'url' => $this->getUrl($url),
                'is_current' => $isCurrent,
            ];

            if ($acl) {
                $oneIsvisible = true;
            }
        }
    }

    if ($oneIsvisible) {
        $editorTree['modules'] = [
            'hasChilds' => true,
            'isVisible' => true,
            'label' => __('Modules'),
            'id' => 'sidebar-left-group-modules',
            'is_current' => false,
            'url' => $this->getUrl('/'),
            'icon' => 'fa fa-cubes',
            'childs' => $childs
        ];
    }
}

$editorTree = \Siberian\Hook::trigger('editor.left.menu.ready', $editorTree);

/**
 * @param $markup
 * @param $menus
 * @param int $level
 * @return string
 */
if (!function_exists('renderRecursiveLeft')) {
    function renderRecursiveLeft($markup, $menus, $isChild = false) {
        foreach ($menus as $menu) {
            if (!$menu['isVisible']) {
                continue;
            }

            // Simple divider!
            if ($menu['hasChilds']) {

                // Check if a child is open
                $isOpen = false;
                foreach ($menu['childs'] as $child) {
                    if ($child['is_current']) {
                        $isOpen = true;
                        break;
                    }
                }

                $isOpenCss = $isOpen ? 'in' : '-';
                $childs = '<div id="' . $menu['id'] . '" 
                            class="collapse sub-bar ' . $isOpenCss . '">' .
                    renderRecursiveLeft('', $menu['childs'], true) . '</div>';

                $label = $menu['label'];
                $isCurrent = $isOpen ? 'aria-expanded="true"' : '';

                $markup .= '
                <li>
                    <div id="group-' . $menu['id'] . '" 
                         class="collapse in">
                        <a href="#' . $menu['id'] . '" 
                           data-toggle="collapse"
                           ' . $isCurrent . '
                           class="collapsed">
                            <i class="' . $menu['icon'] . '"></i>
                            <span class="sb-left-title">' . $label . '</span>
                            <i class="icon ion-chevron-right"></i>
                        </a>
                        ' . $childs . '
                    </div>
                </li>';

            } else {

                $label = $menu['label'];
                $isCurrent = $menu['is_current'] ? 'active' : '-';

                if ($isChild) {
                    $markup .= '
                    <a href="' . $menu['url'] . '" 
                       class="' . $isCurrent . '">
                        <i class="' . $menu['icon'] . '"></i>
                        <span class="sb-left-title">' . $label . '</span>
                    </a>';
                } else {
                    $markup .= '
                <li>
                    <a href="' . $menu['url'] . '" 
                       class="' . $isCurrent . '">
                        <i class="' . $menu['icon'] . '"></i>
                        <span class="sb-left-title">' . $label . '</span>
                    </a>
                </li>';
                }

            }
        }
        return $markup;
    }
}

$outputHtml = renderRecursiveLeft('', $editorTree);

// Development warning!
$isDevelopment = (APPLICATION_ENV !== 'production');
?>

<!-- Sidebar -->
<div id="left-sidebar-wrapper"
     class="bkg-sidebar-left sb-tour">
    <!--div class="super-toggler">
        <i class="icon ion-chevron-left"></i>
    </div-->
    <ul class="sidebar-nav"
        style="padding-bottom: 40px;">
        <li id="sb-tour-app-name"
            class="sidebar-brand sb-tour">
            <img id="header_app_icon"
                 src="<?php echo $this->getApplication()->getIcon(); ?>"
                 class="icon" />
            <span id="header_app_name"><?php echo $this->getApplication()->getShortName(); ?></span>
        </li>
        <?php echo $outputHtml; ?>
    </ul>
</div>